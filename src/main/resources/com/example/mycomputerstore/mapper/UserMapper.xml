<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace属性:用于指定当前的映射文件和哪个接口进行映射，需要指定接口的文件路径，并标注包的完整路径接口-->
<mapper namespace="com.example.mycomputerstore.mapper.UserMapper">

    <!--自定义映射规则：resultMap标签来完成映射规则定义-->
    <!--id属性:标签给这个映射负责分配一个唯一的id值，对应的就是resultMap="id属性的值"属性的取值
        type属性:取值是一个类，表示的是数据库中的查询结果与Java中哪个实体类进行结果集的映射-->
    <resultMap id="UserEntityMap" type="com.example.mycomputerstore.entity.User">
        <!--将表的字段和类的属性不一致的字段进行匹配指定，名称一致的字段可以省略不写-->
        <!--
        配合完成名称不一致的映射:
        column属性:表示表中的资源名称
        property属性:表示类中的属性名称
        -->
        <!--在定义映射规则时主键是不可以省略的-->
        <id column="uid" property="uid"></id>
        <result column="is_delete" property="isDelete"></result>
        <result column="created_User" property="createdUser"></result>
        <result column="created_time" property="createdTime"></result>
        <result column="modified_user" property="modifiedUser"></result>
        <result column="modified_time" property="modifiedTime"></result>
    </resultMap>



    <!--id  表示映射的接口中方法的名称，直接在标签的内部来编写SQl语句

    过程：insert语句通过映射的接口做到和UserMapper内部方法对应
    useGeneratedKeys开启字段递增【主键】   keyProperty递增主键-->

    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        INSERT INTO t_user (
            username,password,salt,phone,email,gender,avatar,is_delete,
            created_user,created_time,modified_user,modified_time
        ) VALUES (
                     /*动态值，需要用占位符进行占位，需要给每个占位符起个专门的名字*/
                     #{username},#{password},#{salt},#{phone},#{email},#{gender},#{avatar},#{isDelete},
                     #{createdUser},#{createdTime},#{modifiedUser},#{modifiedTime}
                 )
    </insert>

    <!--
        select语句在执行时，查询的结果是一个对象，多个对象
        resultType；表示查询的结果集类型，只需要指定对应映射类的类型，并且包含完整包接口
        resultMap：表示当表的资源和类的对象属性的字段名称不一致，来自定义查询结果集的映射规则【驼峰命名规范】
    -->

    <select id="findByUsername" resultMap="UserEntityMap">
        select * from t_user where username=#{username}
    </select>



    <update id="updatePasswordByUid">
        update t_user set
                password=#{password},
                modified_user=#{modifiedUser},
                modified_time=#{modifiedTime}
        where uid=${uid}
    </update>


    <!--resultMap="UserEntityMap":因为我们的数据名对不上-->
    <select id="findByUid" resultMap="UserEntityMap">
        select *
        from t_user where uid=#{uid};
    </select>


    <update id="updateInfoByUid">
        update t_user
            <set>
                <if test="phone!=null">
                    phone=#{phone},
                </if>
                <if test="email!=null">
                    email=#{email},
                </if>
                <if test="gender!=null">
                    gender=#{gender},
                </if>
                modified_user=#{modifiedUser},
                modified_time=#{modifiedTime}
            </set>
        where uid=#{uid}
    </update>
    <update id="updateAvatarByUid">
        update t_user
        set
            avatar=#{avatar},
            modified_time=#{modifiedTime},
            modified_user=#{modifiedUser}
        where
            uid=#{uid}

    </update>

</mapper>